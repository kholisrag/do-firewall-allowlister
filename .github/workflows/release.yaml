# Release workflow for multi-platform Docker images
# Builds and publishes to GitHub Container Registry, Docker Hub, and Quay.io
# Supports automated pre-releases on main branch pushes and manual full releases
#
# Required secrets:
# - DOCKERHUB_USERNAME: Docker Hub username
# - DOCKERHUB_TOKEN: Docker Hub access token
# - QUAY_USERNAME: Quay.io username
# - QUAY_TOKEN: Quay.io access token
#
# GITHUB_TOKEN is automatically provided by GitHub Actions

name: Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
    tags:
      - "v*"
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_type:
        description: "Type of release"
        required: true
        default: "prerelease"
        type: choice
        options:
          - prerelease
          - release
      version_override:
        description: "Override version (optional, e.g., v1.2.3)"
        required: false
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  # Determine semantic version and release type
  version:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    outputs:
      version: ${{ steps.version_override.outputs.version || steps.semantic.outputs.version }}
      version_tag: ${{ steps.version_override.outputs.version_tag || steps.semantic.outputs.version_tag }}
      is_prerelease: ${{ steps.release_type.outputs.is_prerelease }}
      should_release: ${{ steps.release_type.outputs.should_release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate semantic version
        id: semantic
        uses: PaulHatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "BREAKING CHANGE:|feat!:|fix!:"
          minor_pattern: "feat:"
          version_format: "${major}.${minor}.${patch}"
          search_commit_body: true
          user_format_type: "csv"
          enable_prerelease_mode: true
          bump_each_commit: false

      - name: Determine release type
        id: release_type
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual trigger
            if [[ "${{ github.event.inputs.release_type }}" == "release" ]]; then
              echo "is_prerelease=false" >> $GITHUB_OUTPUT
              echo "should_release=true" >> $GITHUB_OUTPUT
            else
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
              echo "should_release=true" >> $GITHUB_OUTPUT
            fi
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # Tag push - full release
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "should_release=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Main branch push - pre-release
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            # Other cases - no release
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Override version if specified
        if: github.event.inputs.version_override != ''
        run: |
          echo "version_tag=${{ github.event.inputs.version_override }}" >> $GITHUB_OUTPUT
          echo "version=${{ github.event.inputs.version_override }}" >> $GITHUB_OUTPUT
        id: version_override

      - name: Generate version summary
        run: |
          echo "## 🏷️ Release Version Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | \`${{ steps.version_override.outputs.version || steps.semantic.outputs.version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Version Tag** | \`${{ steps.version_override.outputs.version_tag || steps.semantic.outputs.version_tag }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Is Pre-release** | ${{ steps.release_type.outputs.is_prerelease }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Should Release** | ${{ steps.release_type.outputs.should_release }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Trigger Event** | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch/Tag** | \`${{ github.ref }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit SHA** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.release_type.outputs.should_release }}" == "true" ]]; then
            if [[ "${{ steps.release_type.outputs.is_prerelease }}" == "true" ]]; then
              echo "🚧 **This will be a pre-release** - suitable for testing and development." >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **This will be a stable release** - ready for production use." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "ℹ️ **No release will be created** - this is a validation run only." >> $GITHUB_STEP_SUMMARY
          fi

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run tests
        run: go test -race -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          fail_ci_if_error: false

      - name: Generate test summary
        if: always()
        run: |
          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f coverage.out ]; then
            # Calculate coverage percentage
            COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| **Test Coverage** | $COVERAGE |" >> $GITHUB_STEP_SUMMARY
            echo "| **Go Version** | $(go version | cut -d' ' -f3) |" >> $GITHUB_STEP_SUMMARY
            echo "| **Platform** | ${{ runner.os }} |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [[ "$COVERAGE" == *"100.0%"* ]]; then
              echo "🎉 **Perfect test coverage achieved!**" >> $GITHUB_STEP_SUMMARY
            elif [[ "$COVERAGE" > "80.0%" ]]; then
              echo "✅ **Good test coverage** - above 80%" >> $GITHUB_STEP_SUMMARY
            elif [[ "$COVERAGE" > "60.0%" ]]; then
              echo "⚠️ **Moderate test coverage** - consider adding more tests" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Low test coverage** - more tests needed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **No coverage data available**" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Coverage report has been uploaded to [Codecov](https://codecov.io/gh/${{ github.repository }})." >> $GITHUB_STEP_SUMMARY

  goreleaser:
    runs-on: ubuntu-latest
    needs: [test, version]
    if: needs.version.outputs.should_release == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      # Set up QEMU for multi-platform Docker builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry (uses built-in GITHUB_TOKEN)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Login to Docker Hub (requires DOCKERHUB_USERNAME and DOCKERHUB_TOKEN secrets)
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Login to Quay.io (requires QUAY_USERNAME and QUAY_TOKEN secrets)
      - name: Log in to Quay.io
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      # Create and push tag for releases
      - name: Create and push tag
        if: needs.version.outputs.is_prerelease == 'true' && !startsWith(github.ref, 'refs/tags/')
        run: |
          VERSION_TAG="${{ needs.version.outputs.version_tag }}"
          if [[ "${{ needs.version.outputs.is_prerelease }}" == "true" ]]; then
            # Add pre-release suffix with timestamp
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            VERSION_TAG="${VERSION_TAG}-pre.${TIMESTAMP}"
          fi
          git tag $VERSION_TAG
          git push origin $VERSION_TAG
          echo "RELEASE_TAG=$VERSION_TAG" >> $GITHUB_ENV

      - name: Set release tag for existing tags
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      # Validate release conditions
      - name: Validate release
        run: |
          echo "Validating release conditions..."

          # Check if this is a manual full release
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.release_type }}" == "release" ]]; then
            echo "Manual full release - performing additional validations"

            # Check if there are any open critical issues (this is just an example)
            # You can add more sophisticated checks here
            echo "✓ Manual release validation passed"
          fi

          # Check if version is valid semantic version
          VERSION_TAG="${{ env.RELEASE_TAG || needs.version.outputs.version_tag }}"
          if [[ ! "$VERSION_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
            echo "❌ Invalid semantic version: $VERSION_TAG"
            exit 1
          fi

          echo "✓ Version validation passed: $VERSION_TAG"
          echo "✓ All release validations passed"

      # Run GoReleaser to build and publish multi-platform Docker images to all registries
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_CURRENT_TAG: ${{ env.RELEASE_TAG || needs.version.outputs.version_tag }}
          IS_PRERELEASE: ${{ needs.version.outputs.is_prerelease }}

      - name: Generate release summary
        if: success()
        run: |
          VERSION_TAG="${{ env.RELEASE_TAG || needs.version.outputs.version_tag }}"
          IS_PRERELEASE="${{ needs.version.outputs.is_prerelease }}"

          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Release Information" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | \`$VERSION_TAG\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Release Type** | $([ "$IS_PRERELEASE" = "true" ] && echo "🚧 Pre-release" || echo "✅ Stable Release") |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Release Date** | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 🐳 Docker Images" >> $GITHUB_STEP_SUMMARY
          echo "Multi-architecture Docker images have been built and published to:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### GitHub Container Registry" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ghcr.io/kholisrag/do-firewall-allowlister:$VERSION_TAG" >> $GITHUB_STEP_SUMMARY
          if [ "$IS_PRERELEASE" != "true" ]; then
            echo "docker pull ghcr.io/kholisrag/do-firewall-allowlister:latest" >> $GITHUB_STEP_SUMMARY
          fi
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "#### Docker Hub" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull kholisrag/do-firewall-allowlister:$VERSION_TAG" >> $GITHUB_STEP_SUMMARY
          if [ "$IS_PRERELEASE" != "true" ]; then
            echo "docker pull kholisrag/do-firewall-allowlister:latest" >> $GITHUB_STEP_SUMMARY
          fi
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "#### Quay.io" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull quay.io/kholisrag/do-firewall-allowlister:$VERSION_TAG" >> $GITHUB_STEP_SUMMARY
          if [ "$IS_PRERELEASE" != "true" ]; then
            echo "docker pull quay.io/kholisrag/do-firewall-allowlister:latest" >> $GITHUB_STEP_SUMMARY
          fi
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 🏗️ Build Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "The following platforms and architectures are supported:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Architecture | Docker Image | Binary |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------------|--------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Linux | amd64 | ✅ | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Linux | arm64 | ✅ | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Linux | arm/v6 | ❌ | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Linux | arm/v7 | ❌ | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| macOS | amd64 | ❌ | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| macOS | arm64 | ❌ | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Windows | amd64 | ❌ | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 🚀 Quick Start with Docker Compose" >> $GITHUB_STEP_SUMMARY
          echo "Use the new Docker Compose configuration for easy deployment:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Download the docker-compose.yaml file" >> $GITHUB_STEP_SUMMARY
          echo "curl -O https://raw.githubusercontent.com/kholisrag/do-firewall-allowlister/main/docker-compose.yaml" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Create your config.yaml file" >> $GITHUB_STEP_SUMMARY
          echo "# (See repository README for configuration details)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Start the service" >> $GITHUB_STEP_SUMMARY
          echo "docker-compose up -d" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Check logs" >> $GITHUB_STEP_SUMMARY
          echo "docker-compose logs -f" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📋 Other Installation Methods" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Using Go Install" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "go install github.com/kholisrag/do-firewall-allowlister/cmd/do-firewall-allowlister@$VERSION_TAG" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "#### Download Binary" >> $GITHUB_STEP_SUMMARY
          echo "Pre-built binaries are available on the [releases page](https://github.com/${{ github.repository }}/releases/tag/$VERSION_TAG)." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 🔗 Useful Links" >> $GITHUB_STEP_SUMMARY
          echo "- 📖 [Documentation](https://github.com/${{ github.repository }}#readme)" >> $GITHUB_STEP_SUMMARY
          echo "- 🐛 [Report Issues](https://github.com/${{ github.repository }}/issues)" >> $GITHUB_STEP_SUMMARY
          echo "- 💬 [Discussions](https://github.com/${{ github.repository }}/discussions)" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 [All Releases](https://github.com/${{ github.repository }}/releases)" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 [Docker Images](https://github.com/${{ github.repository }}/pkgs/container/do-firewall-allowlister)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$IS_PRERELEASE" = "true" ]; then
            echo "### ⚠️ Pre-release Notice" >> $GITHUB_STEP_SUMMARY
            echo "This is a pre-release version intended for testing and development. Please report any issues you encounter." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ✅ Production Ready" >> $GITHUB_STEP_SUMMARY
            echo "This stable release has been tested and is ready for production use." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Generate failure summary
        if: failure()
        run: |
          echo "## ❌ Release Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The release process encountered an error. Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Troubleshooting Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Check the workflow logs above for specific error messages" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify all required secrets are configured:" >> $GITHUB_STEP_SUMMARY
          echo "   - \`DOCKERHUB_USERNAME\` and \`DOCKERHUB_TOKEN\`" >> $GITHUB_STEP_SUMMARY
          echo "   - \`QUAY_USERNAME\` and \`QUAY_TOKEN\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Ensure the version tag is valid and follows semantic versioning" >> $GITHUB_STEP_SUMMARY
          echo "4. Check if there are any conflicts with existing releases" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📞 Need Help?" >> $GITHUB_STEP_SUMMARY
          echo "- [Open an issue](https://github.com/${{ github.repository }}/issues/new)" >> $GITHUB_STEP_SUMMARY
          echo "- [Check existing issues](https://github.com/${{ github.repository }}/issues)" >> $GITHUB_STEP_SUMMARY
